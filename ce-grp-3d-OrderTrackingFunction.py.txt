import boto3
import json
import uuid
from datetime import datetime

dynamodb = boto3.resource('dynamodb')
s3 = boto3.client('s3')

DDB_TABLE_NAME = 'ce-grp-3d-Orders'
S3_BUCKET_NAME = 'ce-grp-3d-chatbot-transcripts'

def lambda_handler(event, context):
    try:
        intent_name = event['sessionState']['intent']['name']
        slots = event['sessionState']['intent'].get('slots', {})
        order_id_slot = slots.get('order_id', {})
        order_id_value = order_id_slot.get('value', {}).get('interpretedValue', None)

        if intent_name == 'TrackOrderIntent':
            if order_id_value:
                # Query DynamoDB for order details
                table = dynamodb.Table(DDB_TABLE_NAME)
                db_response = table.get_item(Key={'order_id': order_id_value})

                if 'Item' in db_response:
                    order = db_response['Item']
                    status = order.get('status', 'unknown')
                    eta = order.get('eta', 'unknown')
                    response_text = f"Your order {order_id_value} is currently {status} and will arrive in {eta}."
                    intent_state = "Fulfilled"
                else:
                    response_text = f"Sorry, I couldn't find any order with ID {order_id_value}."
                    intent_state = "Failed"
            else:
                response_text = "Sorry, I couldn't understand your order number. Please try again."
                intent_state = "Failed"
        else:
            response_text = "Sorry, I didn't understand that. Please ask about your order using a valid order number."
            intent_state = "Failed"

        # Save chat log to S3
        log_data = {
            'timestamp': datetime.utcnow().isoformat(),
            'user_input': order_id_value,
            'intent': intent_name,
            'bot_response': response_text
        }
        s3_key = f"chatlogs/{uuid.uuid4()}.json"
        s3.put_object(Bucket=S3_BUCKET_NAME, Key=s3_key, Body=json.dumps(log_data))

        return {
            "sessionState": {
                "dialogAction": {
                    "type": "Close"
                },
                "intent": {
                    "name": intent_name,
                    "state": intent_state
                }
            },
            "messages": [
                {
                    "contentType": "PlainText",
                    "content": response_text
                }
            ]
        }

    except Exception as e:
        # Log the error (optionally send to S3 too)
        error_log = {
            'timestamp': datetime.utcnow().isoformat(),
            'error': str(e),
            'event': event
        }
        s3.put_object(Bucket=S3_BUCKET_NAME, Key=f"errors/{uuid.uuid4()}.json", Body=json.dumps(error_log))

        return {
            "sessionState": {
                "dialogAction": {
                    "type": "Close"
                },
                "intent": {
                    "name": "TrackOrderIntent",
                    "state": "Failed"
                }
            },
            "messages": [
                {
                    "contentType": "PlainText",
                    "content": "Sorry, something went wrong while checking your order."
                }
            ]
        }
